{"version":3,"sources":["Pet.js","Results.js","SearchParams.js","App.js","reportWebVitals.js","index.js"],"names":["Pet","name","animal","breed","images","location","hero","id","length","className","src","alt","Results","props","pets","console","log","map","pet","city","state","locationList","SearchParams","useState","setLocation","animalList","setAnimalList","setAnimal","breedList","setBreedList","setBreed","petsList","setPetList","callAnimalList","a","fetch","response","json","list","i","indexOf","push","callBreedList","CallPetList","useEffect","htmlFor","onChange","e","target","value","onBlur","animalItem","breedItem","class","onClick","preventDefault","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5571dda.chunk.js","sourcesContent":["\n\nconst Pet = ({ name, animal, breed, images, location, id }) => {\n  let hero = \"http://pets-images.dev-apis.com/pets/none.jpg\";\n  if (images.length) {\n    hero = images[0];\n  }\n\n  return (\n    <div className=\"pet\">\n      <div className=\"image-container\">\n        <img src={hero} alt={name} />\n      </div>\n      <div className=\"info\">\n        <h1>{name}</h1>\n        <h2>{`${animal} — ${breed} — ${location}`}</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default Pet;\n","import Pet from \"./Pet\";\n\nconst Results = (props) => {\n  const { pets } = props;\n  console.log(pets.length);\n  return (\n    <div className=\"search\">\n      {!pets.length ? (\n        <h1>No Pets Found</h1>\n      ) : (\n        pets.map((pet) => {\n          return (\n            <Pet\n              animal={pet.animal}\n              key={pet.id}\n              name={pet.name}\n              breed={pet.breed}\n              images={pet.images}\n              location={`${pet.city}, ${pet.state}`}\n              id={pet.id}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n","import {useState, useEffect} from 'react';\nimport Results from './Results';\n\nconst locationList = [\n    \"Seattle\",\n    \"Minneapolis\",\n    \"Denver\",\n    \"Carol Stream\",\n    \"Charlotte\",\n    \"Springfield\",\n    \"Tucson\",\n  ];\n  \nfunction SearchParams() {\n    const [location, setLocation] = useState(\"\");\n    const [animalList, setAnimalList] = useState([]);\n    const [animal, setAnimal] = useState(\"\");\n  \n    const [breedList, setBreedList] = useState([]);\n    const [breed, setBreed] = useState(\"\");\n  \n    const [petsList, setPetList] = useState([]);\n  \n    let callAnimalList = async () => {\n      let response = await fetch(\n        `https://pets-v2.dev-apis.com/pets?city=${location}`\n      );\n      response = await response.json();\n  \n      let pets = response.pets;\n      let list = [];\n      for (let i = 0; i < pets.length; i++) {\n        list.indexOf(pets[i].animal) === -1 && list.push(pets[i].animal);\n      }\n      setAnimalList(list);\n    };\n  \n    //   For Breed\n  \n    let callBreedList = async () => {\n      let response = await fetch(\n        `https://pets-v2.dev-apis.com/pets?city=${location}&animal=${animal}`\n      );\n      response = await response.json();\n  \n      let pets = response.pets;\n      let list = [];\n      for (let i = 0; i < pets.length; i++) {\n        list.indexOf(pets[i].breed) === -1 && list.push(pets[i].breed);\n      }\n      setBreedList(list);\n    };\n  \n    let CallPetList = async () => {\n      let response = await fetch(\n        `https://pets-v2.dev-apis.com/pets?city=${location}&animal=${animal}&breed=${breed}`\n      );\n      response = await response.json();\n  \n      setPetList(response.pets);\n    };\n  \n    useEffect(() => {\n      callAnimalList();\n    }, [location]);\n  \n    useEffect(() => {\n      callBreedList();\n    }, [animal]);\n  \n    useEffect(() => {\n      CallPetList();\n    }, [breed]);\n  \n    return (\n      <div className=\"search-params\">\n        <form>\n          {/* This is for Location drop-dowm  */}\n          <label htmlFor=\"location\">\n            Location\n            <select\n              id=\"location\"\n              onChange={(e) => {\n                setLocation(e.target.value);\n              }}\n              value={location}\n            >\n              <option></option>\n              {locationList.map((city) => {\n                return <option key={city}>{city}</option>;\n              })}\n            </select>\n          </label>\n          {/* This is for Animal drop-dowm  */}\n          <lable htmlFor=\"animal\">\n            Animal\n            <select\n              id=\"animal\"\n              value={animal}\n              onChange={(e) => {\n                setAnimal(e.target.value);\n              }}\n              onBlur={(e) => {\n                setAnimal(e.target.value);\n              }}\n            >\n              <option />\n              {animalList.map((animalItem) => {\n                return (\n                  <option key={animalItem} value={animalItem}>\n                    {animalItem}\n                  </option>\n                );\n              })}\n            </select>\n          </lable>\n          <label htmlFor=\"breed\">\n            Breed\n            <select\n              id=\"breed\"\n              value={breed}\n              onChange={(e) => {\n                setBreed(e.target.value);\n              }}\n              onBlur={(e) => setBreed(e.target.value)}\n            >\n              <option />\n              {breedList.map((breedItem) => {\n                return (\n                  <option key={breedItem} value={breedItem}>\n                    {breedItem}\n                  </option>\n                );\n              })}\n            </select>\n          </label>\n          <button class = \"button\" onClick={(e) => {\n            e.preventDefault();\n            CallPetList();\n          }}>Submit</button>\n          <button class = \"button\"  onClick=\"window.location.reload();\">Refresh</button>\n        </form>\n        <Results pets={petsList} />\n      </div>\n    );\n  };\n\nexport default SearchParams\n","import './App.css';\nimport SearchParams from \"./SearchParams\";\n\n\nfunction App() {\n  return (\n    <div>\n      <header>\n  <h1>CatPaws & woof!</h1>\n  </header>\n<div> <SearchParams/></div>\n</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}